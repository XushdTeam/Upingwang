package com.upingwang.controller;import com.alibaba.fastjson.annotation.JSONField;import com.upingwang.common.dto.PageResult;import com.upingwang.common.dto.PageSearchParam;import com.upingwang.common.enums.OperateEnum;import com.upingwang.common.result.JsonResult;import com.upingwang.common.target.SystemControllerLog;import com.upingwang.pojo.SystemRole;import com.upingwang.pojo.SystemUser;import com.upingwang.service.SystemRoleService;import com.upingwang.service.SystemUserService;import org.apache.commons.lang3.StringUtils;import org.apache.shiro.authz.annotation.RequiresPermissions;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.MultipartFile;import java.util.Date;import java.util.List;/** * 用户控制 * Created by Xushd on 2017/1/30 0030. */@Controllerpublic class UserController extends GlobalController {    @Autowired    private SystemUserService userService;    @Autowired    private SystemRoleService roleService;    @RequiresPermissions("/user")    @RequestMapping(value = "/user",method = RequestMethod.GET)    public String user(Model model){        model.addAttribute("baseUrl","/user");        model.addAttribute("listUrl","/user/list");        model.addAttribute("handleUrl","/user/handle");        model.addAttribute("deleteUrl","/user/delete");        return "system/user";    }    @SystemControllerLog(module = "用户管理",methods = "用户列表")    @RequestMapping(value = "/user/list",method = RequestMethod.POST)    @ResponseBody    public JsonResult userList(PageSearchParam param){        PageResult result = userService.getUserList(param);        return JsonResult.OK(result);    }    @RequestMapping(value = "/user/handle/{id}")    public String handle(@PathVariable String id, Model model){        model.addAttribute("baseUrl","/user");        if(StringUtils.equals("null",id)){            //新增            model.addAttribute("handle","用户管理/用户注册");            model.addAttribute("saveUrl","/user/save");            return "system/user_register";        }else {            //修改            SystemUser user = userService.getUserById(Long.valueOf(id));            List<SystemRole> roleList = roleService.getRoleListByUserIdAll(Long.valueOf(id));            model.addAttribute("user",user);            model.addAttribute("roleList",roleList);            model.addAttribute("handle", "用户管理/用户修改");            model.addAttribute("saveUrl","/user/update");            model.addAttribute("uploadUrl","/user/"+user.getId()+"/advert/upload");            model.addAttribute("passUpdateUrl","/user/"+user.getId()+"/pass/update");            model.addAttribute("roleUpdateUrl","/user/"+user.getId()+"/role/update");            return "system/user_setting";        }    }    @RequiresPermissions("/user/save")    @SystemControllerLog(module = "用户管理",methods = "用户新增")    @RequestMapping(value = "/user/save",method = RequestMethod.POST)    @ResponseBody    public JsonResult userSave(SystemUser user){        user.setUserAdvert("/resources/images/person.jpg");        user.setCreateUser(super.getUserInfo().getUserName());        user.setCreateTime(new Date());        OperateEnum res = userService.insertUser(user);        return JsonResult.build(res);    }    @RequiresPermissions("/user/update")    @SystemControllerLog(module = "用户管理",methods = "用户信息修改")    @RequestMapping(value = "/user/update",method = RequestMethod.POST)    @ResponseBody    public JsonResult userUpdate(SystemUser user){        OperateEnum result = userService.updateUser(user);        return JsonResult.build(result);    }    @SystemControllerLog(module = "用户管理",methods = "用户头像修改")    @RequestMapping(value = "/user/{userId}/advert/upload",method = RequestMethod.POST)    @ResponseBody    public JsonResult userAdvertUpload(@RequestParam(value = "advert", required = false) MultipartFile filedata, @PathVariable String userId){        JsonResult result = userService.userAdvertUpload(filedata, Long.parseLong(userId));        return result;    }    @SystemControllerLog(module = "用户管理",methods = "用户密码修改")    @RequestMapping(value = "/user/{id}/pass/update",method = RequestMethod.POST)    @ResponseBody    public JsonResult userPassUpdate(String pass0,String pass1,String pass2,@PathVariable String id){        String pass =  super.getUserInfo().getPassword();        JsonResult result = userService.userPassUpdate(pass,pass0,pass1,pass2, Long.parseLong(id));        return result;    }    @SystemControllerLog(module = "用户管理",methods = "修改用户角色")    @RequestMapping(value = "/user/{userId}/role/update",method = RequestMethod.POST)    @ResponseBody    public JsonResult userRoleUpdate(@RequestParam(value = "role[]",required = false)List role, @PathVariable long userId){        OperateEnum result = userService.updateUserRole(role,userId);        return JsonResult.build(result);    }    @RequiresPermissions("/user/delete")    @SystemControllerLog(module = "用户管理",methods = "删除用户")    @RequestMapping(value = "/user/delete/{userId}",method = RequestMethod.POST)    @ResponseBody    public JsonResult userDelete(@PathVariable long userId){        OperateEnum result = userService.deleteUserById(userId);        return JsonResult.build(result);    }}